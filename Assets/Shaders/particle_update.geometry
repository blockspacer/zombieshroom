#version 400
#extension GL_EXT_geometry_shader4 : enable  

layout(points) in;
layout(points, max_vertices = 2) out;

uniform sampler1D g_Random;

layout(std140) uniform PerFrame
{
	float g_dt;
	float g_time;
};

layout(std140) uniform PerObject
{
	vec3 g_Position;
};

in vec3 vert_initialVel[];
in vec2 vert_scale[];
in float vert_age[];
in float vert_type[];

// Transform feedback values.
out vec3 vert_initialPos1;
out vec3 vert_initialVel1;
out vec2 vert_scale1;
out float vert_age1;
out float vert_type1;

vec3 GetRandomDir(float TexCoord)
{
    vec3 direction = texture(g_Random, TexCoord).xyz;
    direction = direction * 2 - 1;
    return direction;
} 

void main() 
{	
	float age = vert_age[0] + g_dt;

	if(vert_type[0] == 0)
	{
		if(age > 0.05f)
		{
			// Spawn new particles with new start values using the initial values.
			vert_initialPos1 = g_Position;
			vert_initialVel1 = GetRandomDir(g_time);
			vert_scale1 = vert_scale[0];
			vert_age1 = 0.0f;
			vert_type1 = 1.0f;
		 
			EmitVertex();
			EndPrimitive();

			age = 0.0f;
		}

		// Always output the emitter particle with initial values.
		vert_initialPos1 = g_Position;
		vert_initialVel1 = vert_initialVel[0];
		vert_scale1 = vert_scale[0];
		vert_age1 = age;
		vert_type1 = 0.0f;
		 
		EmitVertex();
		EndPrimitive();
	}
	else
	{
		// Update.
		vec3 DeltaV = g_dt * vec3(0.0, 0.0f, 0.0); 
		vec3 DeltaP = g_dt * vert_initialVel[0];
		
		if(age <= 20.0f)
		{
			vert_initialPos1 = gl_in[0].gl_Position.xyz + DeltaP;		
			vert_initialVel1 = vert_initialVel[0] + DeltaV;
			vert_scale1 = vert_scale[0];
			vert_age1 = age;		
			vert_type1 = 1.0f;
		 
			EmitVertex();
			EndPrimitive();
		}
	}
}