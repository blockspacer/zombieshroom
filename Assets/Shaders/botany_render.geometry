#version 400
#extension GL_EXT_geometry_shader4 : enable  

//#define SHOW_LOD
//#define SHOW_NORMALS

layout(points) in;
#ifdef SHOW_NORMALS
layout(line_strip, max_vertices = 10) out;
#else
layout(triangle_strip, max_vertices = 80) out;
#endif

layout(std140) uniform PerFrame
{
	mat4 projectionMatrix;
	mat4 viewMatrix;
    mat4 invView;
};

layout(std140) uniform Time
{
	float g_dt;
	float g_time;
};

layout(std140) uniform PerTech
{
    vec3 g_PlayerPosition;
};

in vec3 gs_normal_in[];
in float gs_density_in[];
in float gs_lod_in[];

out vec2 vert_texcoord1;
out vec3 vert_normal1;
out vec3 vert_color1;

float FlipNormal(vec3 position, vec3 normal, vec3 cameraPosition)
{
    // Flip normals if camera is aligned with normals.
    float flipped = 1.0;
    vec3 n = normalize(normal); 
    vec3 direction = vec3((position + n) - cameraPosition);
    if(dot(direction, n) > 0)
        flipped = -1.0;
    return flipped;
}

// LOD 0 cluster.

// Positions.
vec3 mediumBlade3[5] = vec3[](
    vec3(-0.146905, 0, 0.033582),
    vec3(-0.027772, 0, -0.096591),
    vec3(-0.220092, 0.341586, -0.050081),
    vec3(-0.117577, 0.341586, -0.162096),
    vec3(-0.406822, 0.590890, -0.323893)
);

// Texcoords.
vec2 mediumBlade3TC[5] = vec2[](
    vec2(0.999992, -0.000006),
    vec2(0.000008, -0.000006),
    vec2(0.930247, -0.578085),
    vec2(0.069754, -0.578085),
    vec2(0.500000, -0.999991)
);

// Normals.
vec3 mediumBlade3Normals[5] = vec3[](
    vec3(-0.701900, -0.307720, -0.642374),
    vec3(-0.701900, -0.307720, -0.642374),
    vec3(-0.612875, -0.556576, -0.560899),
    vec3(-0.612875, -0.556576, -0.560899),
    vec3(-0.451078, -0.791268, -0.412824)
);

// Output medium blade 3.
void CreateMediumBlade3(vec3 position, vec3 cameraPosition)
{
    float flip = FlipNormal(position, mediumBlade3[0], cameraPosition);
       
    int i;
    for(i = 0; i < 5; i++)
    {
        vec4 pos = vec4(position + mediumBlade3[i], 1.0);
        gl_Position = projectionMatrix * viewMatrix * pos;  
        vec3 normal = normalize(mediumBlade3Normals[i].xyz);   
        vert_normal1 = (viewMatrix * vec4(normal, 0.0)).xyz * flip;
        vert_texcoord1 = mediumBlade3TC[i];
        EmitVertex();
    }
    EndPrimitive();
}

vec3 mediumBlade[5] = vec3[](
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0)
);

vec3 mediumBlade2[5] = vec3[](
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0)
);

vec3 tallBlade[7] = vec3[](
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0)
);

vec3 tallBlade2[7] = vec3[](
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0),
    vec3(0,0,0)
);



void CreateQuad(vec3 position, vec3 cameraPosition)
{
    // Scale.
    vec2 scale = vec2(0.5, 0.5);
    
    // Local vertices.
	vec4 vertices[4];  
	vertices[0] = vec4(-scale.x, scale.y, 0, 1.0f);  
	vertices[1] = vec4(scale.x, scale.y, 0, 1.0f);   
	vertices[2] = vec4(-scale.x, -scale.y, 0, 1.0f);  
	vertices[3] = vec4(scale.x, -scale.y, 0, 1.0f);

    // Billboard basis.
    vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 direction = normalize(position - cameraPosition);
    vec3 side = normalize(cross(up, direction));
    
    mat4 billboardTransform;
    billboardTransform[0] = vec4(side, 0);
    billboardTransform[1] = vec4(up, 0);
    billboardTransform[2] = vec4(direction, 0);
    billboardTransform[3] = vec4(position, 1.0);
    
    vec2 texCoords[4];
	texCoords[0] = vec2(0,0);
	texCoords[1] = vec2(1,0);
	texCoords[2] = vec2(0,1);
	texCoords[3] = vec2(1,1);

    // Output four vertices.
    int i;
    for(i = 0; i < 4; i++)
    {
        gl_Position = projectionMatrix * viewMatrix * billboardTransform * vertices[i];
        vert_texcoord1 = texCoords[i];
        vert_normal1 = gs_normal_in[0];
        EmitVertex();
    }
    
    EndPrimitive();   
}

void main() 
{
    // Average density.
    float avgDensity = gs_density_in[0];
    
    // Camera position.
    vec3 cameraPos = (invView * vec4(0,0,0,1)).xyz;
    
    if(gs_lod_in[0] == 0)
    {
        if(avgDensity > 0.1)
        {
            CreateMediumBlade3(gl_in[0].gl_Position.xyz, cameraPos);
        }     
    }
    else if(gs_lod_in[0] == 1)
    {
 
    }
    else
    {
        //CreateQuad(gl_in[0].gl_Position.xyz, cameraPos);
    }
}