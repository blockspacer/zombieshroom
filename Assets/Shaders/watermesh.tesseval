#version 410 core                                                                               
                                                                                                
layout(triangles) in;                                                       
        
layout(std140) uniform PerFrame
{
	mat4 projectionMatrix;
	mat4 viewMatrix;
};  

layout(std140) uniform PerObject
{
	mat4 modelMatrix;
	mat4 normalMatrix;
	vec3 gEyeWorldPos;
};                  
                                                                                                                                
in vec3 WorldPos_ES_in[];                                                                    
in vec2 TexCoord_ES_in[];
                                                                                                                                                                                                                             
out vec3 WorldPos_FS_in;                                                                        
out vec2 TexCoord_FS_in;                                                                        
out vec3 Normal_FS_in;                                                                          
      
uniform sampler2D g_Diffuse;
uniform sampler2D g_Normal;
      
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)                                                 
{                                                                                             
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2; 
}                                                                                             
                                                                                              
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)                                                 
{                                                                                             
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2; 
}           
                                                                          
void main()                                                                                     
{                                                                                               
    // Interpolate the attributes of the output vertex using the barycentric coordinates        
    TexCoord_FS_in = interpolate2D(TexCoord_ES_in[0], TexCoord_ES_in[1], TexCoord_ES_in[2]);  
	vec3 normalMap = texture(g_Normal, TexCoord_FS_in).xyz;
	normalMap = normalize(normalMap.xyz*2-1); 
    
    Normal_FS_in = normalMap;
	float height = texture(g_Diffuse, TexCoord_FS_in).r; 
	//Calc new vertex position                             
    WorldPos_FS_in = interpolate3D(WorldPos_ES_in[0], WorldPos_ES_in[1], WorldPos_ES_in[2]) + vec3(0, height, 0);    
                               
    gl_Position = projectionMatrix * viewMatrix * vec4(WorldPos_FS_in, 1.0f);                                              
}                                       