#version 410 core                                                                               
                                                                                                
layout(triangles) in; 

layout(std140) uniform PerObject
{
	vec3 g_Position;
};

in vec3 es_normal_in[];                                                                  
in float es_density_in[];       

out vec3 gs_normal_in;                                                                  
out float gs_density_in; 
out float gs_lod_in;

vec2 interpolate(float v0, float v1, float v2)                                                 
{                                                                                             
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2; 
}                                                                                             
  
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2)                                                 
{                                                                                             
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2; 
}                                                                                             
                                                                                              
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2)                                                 
{                                                                                             
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2; 
}

void main()                                                                                     
{                                                                              
    gs_density_in = interpolate(es_density_in[0], es_density_in[1], es_density_in[2]);
    gs_normal_in = es_normal_in[0];   
   
    vec3 position = interpolate3D(gl_in[0].gl_Position.xyz, gl_in[1].gl_Position.xyz, gl_in[2].gl_Position.xyz);
   
    // Decide LOD.
    float distance = length(position - g_Position);
    
    if(distance < 20.0)
    {
        gs_lod_in = 0.0;
    }
    else if(distance < 60.0)
    {
        gs_lod_in = 1.0;
    }
    else
    {
        gs_lod_in = 2.0;
    }
    
    gl_Position = vec4(position, 1.0);                                     
}  